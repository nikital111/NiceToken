/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Market {
  export type ItemStruct = {
    idNft: PromiseOrValue<BigNumberish>;
    url: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<string>;
    startSale: PromiseOrValue<BigNumberish>;
    endSale: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
  };

  export type ItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    idNft: BigNumber;
    url: string;
    price: BigNumber;
    description: string;
    startSale: BigNumber;
    endSale: BigNumber;
    seller: string;
  };
}

export interface MarketInterface extends utils.Interface {
  functions: {
    "buyItem(uint256)": FunctionFragment;
    "delistItem(uint256)": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "getList()": FunctionFragment;
    "getVolume()": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "listItem(uint256,uint256,string,uint256)": FunctionFragment;
    "nft()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyItem"
      | "delistItem"
      | "getItem"
      | "getList"
      | "getVolume"
      | "items"
      | "listItem"
      | "nft"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getList", values?: undefined): string;
  encodeFunctionData(functionFragment: "getVolume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delistItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVolume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "itemDelist(address,uint256,uint256)": EventFragment;
    "itemList(address,uint256,uint256,uint256)": EventFragment;
    "itemSell(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "itemDelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "itemSell"): EventFragment;
}

export interface itemDelistEventObject {
  initiator: string;
  id: BigNumber;
  timestamp: BigNumber;
}
export type itemDelistEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  itemDelistEventObject
>;

export type itemDelistEventFilter = TypedEventFilter<itemDelistEvent>;

export interface itemListEventObject {
  seller: string;
  id: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
}
export type itemListEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  itemListEventObject
>;

export type itemListEventFilter = TypedEventFilter<itemListEvent>;

export interface itemSellEventObject {
  seller: string;
  buyer: string;
  id: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
}
export type itemSellEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  itemSellEventObject
>;

export type itemSellEventFilter = TypedEventFilter<itemSellEvent>;

export interface Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Market.ItemStructOutput]>;

    getList(overrides?: CallOverrides): Promise<[Market.ItemStructOutput[]]>;

    getVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
        idNft: BigNumber;
        url: string;
        price: BigNumber;
        description: string;
        startSale: BigNumber;
        endSale: BigNumber;
        seller: string;
      }
    >;

    listItem(
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      _endSale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyItem(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistItem(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getItem(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Market.ItemStructOutput>;

  getList(overrides?: CallOverrides): Promise<Market.ItemStructOutput[]>;

  getVolume(overrides?: CallOverrides): Promise<BigNumber>;

  items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
      idNft: BigNumber;
      url: string;
      price: BigNumber;
      description: string;
      startSale: BigNumber;
      endSale: BigNumber;
      seller: string;
    }
  >;

  listItem(
    _id: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _description: PromiseOrValue<string>,
    _endSale: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    delistItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Market.ItemStructOutput>;

    getList(overrides?: CallOverrides): Promise<Market.ItemStructOutput[]>;

    getVolume(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
        idNft: BigNumber;
        url: string;
        price: BigNumber;
        description: string;
        startSale: BigNumber;
        endSale: BigNumber;
        seller: string;
      }
    >;

    listItem(
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      _endSale: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "itemDelist(address,uint256,uint256)"(
      initiator?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): itemDelistEventFilter;
    itemDelist(
      initiator?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): itemDelistEventFilter;

    "itemList(address,uint256,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      timestamp?: null
    ): itemListEventFilter;
    itemList(
      seller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      timestamp?: null
    ): itemListEventFilter;

    "itemSell(address,address,uint256,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      timestamp?: null
    ): itemSellEventFilter;
    itemSell(
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      timestamp?: null
    ): itemSellEventFilter;
  };

  estimateGas: {
    buyItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getList(overrides?: CallOverrides): Promise<BigNumber>;

    getVolume(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      _endSale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getItem(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _description: PromiseOrValue<string>,
      _endSale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
